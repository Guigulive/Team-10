pragma solidity ^0.4.14;

contract Payroll{
    uint constant payDuration = 10 seconds;
    
    uint salary ;
    address owner;
    address employee;
    uint lastPayDay;
    
    function Payroll() {
        owner = msg.sender;
    }
    
    function setEmployeeAddress(address y) {
        require(msg.sender == owner);
        
        if(employee != 0x0 ){
            uint payment = salary * (now - lastPayDay) / payDuration;
            employee.transfer(payment);
        }
        
        employee = y;
        lastPayDay = now;
    }
    
    function setEmployeeSalary(uint x) constant returns (uint){
        salary = x * 1 ether;
        return salary;
    }
    
    function addFund() payable returns (uint){
        return this.balance;
    }
    
    function calculateRunway() returns (uint){
        return this.balance / salary;
    }
    
    function hasEnoughFund() returns (bool){
        return calculateRunway() > 0;
    }
    
    function getPaid() returns(uint){
        if(msg.sender != employee){
            revert();
        }
        uint nextPayday = lastPayDay + payDuration;
        if(nextPayday > now){
            revert();
        }
        
            lastPayDay = nextPayday;
            employee.transfer(salary);
    }
    
}
